from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from services.user_storage import UserStorage

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

- –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å".
- –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

storage = UserStorage()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    calendar_id = storage.get_calendar(user_id)

    buttons = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton("üìÖ –°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="change_calendar")]
    ]

    reply_markup = InlineKeyboardMarkup(buttons)

    welcome_text = (
        "<b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: <code>{calendar_id if calendar_id else '–Ω–µ –≤—ã–±—Ä–∞–Ω'}</code>\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )

    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query #callback_query - —Å–ø–µ—Ü —Å–æ–±—ã—Ç–∏–µ inline-–∫–Ω–æ–ø–∫–∏
    user_id = update.effective_user.id
    await query.answer() #–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–≥, —á—Ç–æ –º—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å


    if query.data == "create_task":
        calendar_id = storage.get_calendar(user_id)
        if not calendar_id:
            event_flow = context.application.bot_data.get('event_flow')
            if not event_flow:
                await query.edit_message_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                return
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...")
            await event_flow.start(update, context, event=None)
        else:
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.")

    elif query.data == 'change_calendar':
        event_flow = context.application.bot_data.get('event_flow')
        if not event_flow:
            await query.edit_message_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            return
        await query.edit_message_text("–°–µ–∫—É–Ω–¥—É, –∑–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π...")
        await event_flow.start(update, context, event=None)


async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="create_task")],
        [InlineKeyboardButton("üìÖ –°–º–µ–Ω–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="change_calendar")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )

