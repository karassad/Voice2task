import json
import os.path
import logging

from telegram import Update, Voice
from telegram.ext import ContextTypes

from tg_bot.utils.transcriber import transcribe_audio
from tg_bot.utils.audio import convert_ogg_to_wav
from tg_bot.utils.gpt_parser import parse_task_to_event
from tg_bot.utils.oauth import generate_google_auth_url
from tg_bot.config import TOKENS_DIR

from calendar_client import GoogleCalendar

logger = logging.getLogger(__name__)
# logging.basicConfig(level=logging.INFO)

RAILWAY_DOMAIN = "https://web-production-25e89.up.railway.app"

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram-–±–æ—Ç–∞
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Å–æ–±—ã—Ç–∏–µ
–ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é 
"""
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("handle_voice –≤—ã–∑–≤–∞–Ω")
    logger.debug(f"Update data: {update}")

    user_id = update.effective_user.id
    token_path = os.path.join(TOKENS_DIR, f"token_{user_id}.json")

    logger.info(f"user_id = {user_id}")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞: {token_path}")

    if not os.path.exists(token_path):
        try:
            logger.info("üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É...")
            auth_url = generate_google_auth_url(user_id)
            logger.info("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: %s", auth_url)

            await update.message.reply_text(
                f"–ß—Ç–æ–±—ã —è –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–≤–æ–π Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è:\n{auth_url}"
            )

        except Exception:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OAuth-—Å—Å—ã–ª–∫–∏ (user_id={user_id}):")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    try:
        logger.info("‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        voice: Voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)
        await file.download_to_drive('voice.ogg')

        logger.info("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ")

        convert_ogg_to_wav("voice.ogg", "voice.wav")
        logger.info("üéõÔ∏è –§–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WAV")

        text = transcribe_audio("voice.wav")
        await update.message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}")

        logger.info("üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: %s", text)

        event = parse_task_to_event(text)
        formatted = json.dumps(event, indent=2, ensure_ascii=False)

        logger.info("üì¶ Event object: %s", event)

        calendar = GoogleCalendar(user_id)
        created_event = calendar.add_event_to_primary(event)
        link = created_event.get('htmlLink')

        await update.message.reply_text(
            f"üìÖ –ó–∞–¥–∞—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞:\n<pre>{formatted}</pre>\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n{link}",
            parse_mode="HTML"
        )

    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
