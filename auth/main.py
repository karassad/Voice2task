import json
import logging
import os

from dotenv import load_dotenv
from fastapi import FastAPI, Request  # FastAPI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTP API-—Å–µ—Ä–≤–µ—Ä–æ–≤
from google_auth_oauthlib.flow import Flow  # –æ–±—ä–µ–∫—Ç –æ—Ç Google, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ OAuth 2.0 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.

from tg_bot.config import TOKENS_DIR

load_dotenv()

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–ø–∏
logger.info("‚úÖ FastAPI app instance —Å–æ–∑–¥–∞–Ω")

SCOPES = ["https://www.googleapis.com/auth/calendar"]  # —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—Ä–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
# CLIENT_SECRET_FILE = "auth/credentials.json" #OAuth 2.0
GOOGLE_CREDS = os.getenv("GOOGLE_CREDENTIALS_JSON")
creds_dict = json.loads(GOOGLE_CREDS)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤
@app.get("/oauth2callback")
async def oauth2callback(request: Request):
    logger.info("FastAPI —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    try:
        user_id = request.query_params.get("state")  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        code = request.query_params.get('code')  # –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

        logger.info("CALLBACK –ü–û–õ–£–ß–ï–ù")
        logger.info(f"user_id = {user_id}")
        logger.info(f"code = {code}")

        if not user_id or not code:
            logger.error("–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'state' –∏–ª–∏ 'code'")
            return {"error": "missing parameters"}

        logger.info(f"üëâ REDIRECT_URL = {os.getenv('REDIRECT_URL')}")
        logger.info(f"üëâ SCOPES = {SCOPES}")

        flow = Flow.from_client_config(  # —á–∏—Ç–∞–µ—Ç credentials.json
            creds_dict,
            scopes=SCOPES,
            redirect_uri=os.getenv("REDIRECT_URL")  # –∫—É–¥–∞ Google –≤–µ—Ä–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        )

        # —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google API –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        flow.fetch_token(code=code)  # –û–±–º–µ–Ω–∏–≤–∞–µ–º code –Ω–∞ access_token –∏ refresh_token
        creds = flow.credentials  # –æ–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

        os.makedirs(TOKENS_DIR, exist_ok=True)
        token_path = os.path.join(TOKENS_DIR, f"token_{user_id}.json")
        logger.info(f"üëâ TOKENS_DIR = {TOKENS_DIR}")
        logger.info(f"üëâ DIR EXISTS: {os.path.exists(TOKENS_DIR)}")

        with open(token_path, "w") as token_file:
            token_file.write(creds.to_json())

        logger.info(f"–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {token_path}")

        return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram-–±–æ—Ç."}
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ oauth2callback:")
        logger.exception(e)
        return {"error": "Internal error"}
