import os
import logging
import sys
from multiprocessing import Process
import subprocess
import uvicorn
import threading

logging.basicConfig(
    level=logging.INFO,  # –∏–ª–∏ DEBUG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    format="%(asctime)s [%(levelname)s] %(name)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logger = logging.getLogger(__name__)

def start_api():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–∞ 0.0.0.0:8080")
    uvicorn.run("auth.main:app", host="0.0.0.0", port=8080)

def stream_output(pipe, level):
    for line in iter(pipe.readline, ''):
        if line:
            logger.log(level, line.strip())

def start_bot():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞...")
    env = os.environ.copy()
    env["PYTHONPATH"] = "."

    try:
        process = subprocess.Popen(
            ["python", "tg_bot/bot.py"],
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        threading.Thread(target=stream_output, args=(process.stdout, logging.INFO), daemon=True).start()
        threading.Thread(target=stream_output, args=(process.stderr, logging.ERROR), daemon=True).start()

        process.wait()
        logger.info("‚õî –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è.")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")


if __name__ == "__main__":
    logger.info("üì¶ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –¥–≤—É–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ (API + BOT)")
    p1 = Process(target=start_api)
    p2 = Process(target=start_bot)
    p1.start()
    p2.start()
    p1.join()
    p2.join()
